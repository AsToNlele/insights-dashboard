import VulnerabilityCard from './VulnerabilityCard';
import Loading from '../../PresentationalComponents/Loading/Loading';
import { cvesInterceptors } from '../../../cypress/support/interceptors';
import Masonry from 'react-masonry-css';

before(() => {
    cy.mockWindowChrome();
});

const breakpointColumnsObj = {
    default: 2,
    992: 1
};

describe('Dashboard CVES', () => {
    beforeEach(() => {
        cvesInterceptors.successful();
        cy.mountWithContext(
            VulnerabilityCard,
            Loading,
            Masonry,
            { breakpointCols: breakpointColumnsObj,
                className: 'ins-l-masonry',
                columnClassName: 'ins-l-masonry_column' },
            true);});
    it('the text in the header text is correct', () => {
        cy.get('div[class="pf-c-content insd-c-width-limiter"]')
        .should('have.text',
            'Red Hat recommends addressing these CVEs with high priority due to heightened risk associated with these security issues');
    });
    it('the first metrics value is correct ', () => {
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item"]')
        .eq(0).should('have.text', '56CVEs with security rules impacting 1 or more systemsView CVEs');
    });
    //DO THE SAME TEST AS ABOVE BUT FOR THE SECOND METRIC

    it('the first toggle is clickable', () => {
        cy.get('button[id="insd-c-dashboard__card-title--Vulnerabilities-toggle-button"]').click();
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item"]').should('not.exist');
    });
    //DO THE SAME FOR THE SECOND TOGGLE AND TEST THAT VALUES DO NOT EXIST THERE

});

describe('Dashboard CVES Empty state', () => {
    beforeEach(() => {
        cvesInterceptors['successful empty']();
        cy.mountWithContext(
            VulnerabilityCard,
            Loading,
            Masonry,
            { breakpointCols: breakpointColumnsObj,
                className: 'ins-l-masonry',
                columnClassName: 'ins-l-masonry_column' },
            true);});
    it('the text in the header text is correct', () => {
        cy.get('div[class="pf-c-content insd-c-width-limiter"]')
        .should('have.text',
            'Red Hat recommends addressing these CVEs with high priority due to heightened risk associated with these security issues');
    });
    it('the first metrics value is correct ', () => {
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item"]')
        .eq(0).should('have.text', '56CVEs with security rules impacting 1 or more systemsView CVEs');
    });
    //THIS TEST IS BROKEN. FIX IT AND ADD ADDITIONAL FOR THE SECOND METRICS VALUE

    it('the first toggle is clickable', () => {
        cy.get('button[id="insd-c-dashboard__card-title--Vulnerabilities-toggle-button"]').click();
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item"]').should('not.exist');
    });
    //DO THE SAME FOR THE SECOND TOGGLE AND TEST THAT VALUES DO NOT EXIST THERE

});

describe('Dashboard CVEs Error state', () => {
    beforeEach(() => {
        cvesInterceptors['failed with server error']();
        cy.mountWithContext(
            VulnerabilityCard,
            Loading,
            Masonry,
            { breakpointCols: breakpointColumnsObj,
                className: 'ins-l-masonry',
                columnClassName: 'ins-l-masonry_column' },
            true);});

    it('the text in the header text is correct', () => {
        cy.get('div[class="pf-c-empty-state insd-c-dashboard__error-state undefined"]')
        .should('have.text',
            ' Vulnerability has experienced an error. Contact Red Hat support if the problem persists. ');
    });
});

